# .github/workflows/deploy.yml
name: deploy-to-aca

on:
  workflow_run:
    workflows: ["build-and-push"]     # ci.yml の name と一致
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1) Azure にログイン
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2) Container Apps へデプロイ
      - name: Deploy to Azure Container Apps
        uses: azure/CLI@v1
        with:
          azcliversion: 2.72.0            # GA 最新
          inlineScript: |
            set -eox pipefail

            RG="pos-mvp-rg"
            ENV="pos-mvp-env"
            REG="${{ secrets.ACR_LOGIN_SERVER }}"
            USER="${{ secrets.ACR_USERNAME }}"
            PASS="${{ secrets.ACR_PASSWORD }}"
            TAG="${{ github.event.workflow_run.head_sha }}"

            # === 本番用DBパスワード ===
            DB_PASS="limit500?" 

            # ======= Backend ===================================================
            if az containerapp show -g $RG -n pos-backend &>/dev/null; then
              az containerapp update -g $RG -n pos-backend --image $REG/pos-backend:$TAG
            else
              az containerapp create \
                -g $RG -n pos-backend -e $ENV \
                --image $REG/pos-backend:$TAG \
                --target-port 8000 --ingress external \
                --min-replicas 1 \
                --cpu 0.5 --memory 1Gi \
                --env-vars FRONTEND_ORIGIN="https://pos-frontend.ashystone-fb341e56.japaneast.azurecontainerapps.io" \
                           DATABASE_URL="mysql+pymysql://adminuser:limit500?@posmysqlserver-sea.mysql.database.azure.com:3306/pos_app_db?ssl_ca=/etc/ssl/certs/digicert.pem&ssl_verify_cert=true"

            fi
            az containerapp registry set -g $RG -n pos-backend \
              --server $REG --username $USER --password $PASS

            # BACKEND_FQDN を取得
            BACK_FQDN=$(az containerapp show -g $RG -n pos-backend \
              --query properties.configuration.ingress.fqdn -o tsv)

            # ======= Frontend ==================================================
            if az containerapp show -g $RG -n pos-frontend &>/dev/null; then
              az containerapp update -g $RG -n pos-frontend --image $REG/pos-frontend:$TAG
            else
              az containerapp create \
                -g $RG -n pos-frontend -e $ENV \
                --image $REG/pos-frontend:$TAG \
                --target-port 3000 --ingress external \
                --min-replicas 1 \
                --cpu 0.5 --memory 1Gi \
                --env-vars "NEXT_PUBLIC_API_URL=https://$BACK_FQDN"
            fi
            # env だけ更新（create 時は上書きされるが update 分岐用）
            az containerapp update -g $RG -n pos-frontend \
              --set-env-vars "NEXT_PUBLIC_API_URL=https://$BACK_FQDN"
            az containerapp registry set -g $RG -n pos-frontend \
              --server $REG --username $USER --password $PASS

            # ======= MySQL (internal) ==========================================
            if az containerapp show -g $RG -n pos-db &>/dev/null; then
              echo "pos-db already exists"
            else
              az containerapp create \
                -g $RG -n pos-db -e $ENV \
                --image mysql:8.0 \
                --target-port 3306 --ingress internal \
                --min-replicas 1 \
                --cpu 0.5 --memory 1Gi \
                --env-vars MYSQL_ROOT_PASSWORD="$DB_PASS" \
                           MYSQL_DATABASE=pos_app_db
            fi
            
            # ======= Init Script 実行 ==========================================
            echo "==> 実行中: 初期データの登録 init_data.py"

            # pos-backend の FQDN から /init 実行を想定（FastAPI 側に /init 実装必要）
            curl -X POST https://$BACK_FQDN/init || echo "⚠ /init 実行失敗または未実装"

